import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from database import store_user_info, mark_orphan_chosen, get_all_unchosen_orphan_ids, get_orphan_by_id
import sqlite3
import boto3 

# Your bot token
TOKEN = "Of_course_i_will_not_tell"  # Replace with your bot token

# Set up logging
logging.basicConfig(
    filename="bot_activity.log",
    level=logging.WARNING,  # Only log WARNING and above by default
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# Define states
NAME, PHONE, CHOOSE_ORPHAN, HELP_MORE = range(4)

S3_BUCKET_NAME = "will_not_tell"  # Replace with your bucket name
S3_REGION = "Frankfurt"  # Replace with your S3 bucket region

s3_client = boto3.client('s3')

# Function to upload files to S3
def upload_to_s3(file_name, bucket_name, object_name):
    try:
        s3_client.upload_file(file_name, bucket_name, object_name)
        logging.warning(f"File {file_name} uploaded to S3 bucket {bucket_name} as {object_name}.")
    except Exception as e:
        logging.error(f"Failed to upload {file_name} to S3: {e}")


# Start command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_telegram_username = update.message.from_user.username  # Capture the Telegram username
    context.user_data['telegram_username'] = user_telegram_username  # Save Telegram username in context
    logging.warning(f"User {user_telegram_username} started the conversation.")  # Log user start
    await update.message.reply_text(
        """
–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –î–µ–¥ –ú–æ—Ä–æ–∑üéÖ!
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç—Ä–∞–¥–∏—Ü–∏–∏ _¬´ARMAN ‚Äì 2024¬ª_‚ú®!
–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–∏–º —Ç–µ–±—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ ¬´ARMAN ‚Äì 2024¬ª –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.
*–ï—Å–ª–∏ —Ç—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–µ –∏–º—è*üòä
        """, parse_mode='Markdown'
    )
    return NAME

# Get user name
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text
    context.user_data['name'] = user_name  # Save the user's name
    logging.warning(f"User {context.user_data['telegram_username']} provided their name: {user_name}")  # Log name input
    await update.message.reply_text(
        """ 
–†–∞–¥—ã –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!
–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞üéÅ:            ‚ùóÔ∏è*–î–û 25 –¥–µ–∫–∞–±—Ä—è (—Å—Ä–µ–¥–∞)*‚ùóÔ∏è
–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–æ–Ω–¥ ¬´–ë–∞“õ—ã—Ç—Ç—ã —à–∞“£—ã—Ä–∞“õ¬ª, –ø—Ä. –†–∞–∫—ã–º–∂–∞–Ω –ö–æ—à–∫–∞—Ä–±–∞–µ–≤, –¥–æ–º 60, 1 —ç—Ç–∞–∂, –ù–ü ‚Ññ 5
–°—Å—ã–ª–∫–∞ –Ω–∞ 2–ì–ò–°: https://2gis.kz/astana/geo/70000001065251665


*–ß—Ç–æ–±—ã, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.*
        """, parse_mode='Markdown'
    )
    return PHONE

# Get phone number
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_number = update.message.text
    if phone_number:
        user_name = context.user_data['name']
        telegram_username = context.user_data['telegram_username']

        # Store user info and get the user_id
        user_id = store_user_info(user_name, phone_number, telegram_username)
        context.user_data['phone'] = phone_number  # Save phone number in user data

        logging.warning(f"User {telegram_username} provided phone number: {phone_number}")  # Log phone input
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, {user_name}. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

        # Show unchosen orphans
        orphan_ids = get_all_unchosen_orphan_ids()
        if orphan_ids:
            buttons = [[InlineKeyboardButton(str(i), callback_data=str(i))] for i in orphan_ids]
            inline_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ 275 –ø–∏—Å–µ–º. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –ø–æ –¥—É—à–µ!", reply_markup=inline_markup)
            return CHOOSE_ORPHAN
        else:
            await update.message.reply_text("üéâ–£—Ä–∞üéâ! –í—Å–µ –¥–µ—Ç–∏ –Ω–∞—à–ª–∏ —Å–≤–æ–∏—Ö –î–µ–¥–æ–≤ –ú–æ—Ä–æ–∑–æ–≤, –∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∫–∞–∂–¥–æ–≥–æ  –∑–∞ –≤–∞—à—É –¥–æ–±—Ä–æ—Ç—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
            return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return PHONE

# Handle orphan selection
# Handle orphan selection with checking if the orphan has already been chosen
async def choose_orphan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # Acknowledge the button click

    orphan_id = query.data
    try:
        orphan_id = int(orphan_id)

        # Check if the orphan has already been chosen
        conn = sqlite3.connect("orphans.db")
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM chosen_kids WHERE orphan_id = ?", (orphan_id,))
        orphan_exists = cursor.fetchone()  # Check if the orphan has already been chosen
        conn.close()

        if orphan_exists:
            # If already chosen, send a message to the user to choose a different orphan
            await query.edit_message_text("–û –Ω–µ—Ç, –∫—Ç–æ-—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π.")
            orphan_ids = get_all_unchosen_orphan_ids()  # Get new list of unchosen orphans
            buttons = [[InlineKeyboardButton(str(i), callback_data=str(i))] for i in orphan_ids]
            inline_markup = InlineKeyboardMarkup(buttons)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ 275 –ø–∏—Å–µ–º.", reply_markup=inline_markup)
            return CHOOSE_ORPHAN  # Let the user choose again
        else:
            # Proceed with orphan selection if not already chosen
            orphan = get_orphan_by_id(orphan_id)
            if orphan:
                user_name = context.user_data['name']
                user_phone = context.user_data['phone']
                telegram_username = context.user_data['telegram_username']

                orphan_name, orphan_age, orphan_gift, orphan_parent_phone, orphan_hyper_link = (
                    orphan[1], orphan[2], orphan[3], orphan[4], orphan[5]
                )

                # Mark orphan as chosen
                mark_orphan_chosen(orphan_id, user_name)

                # Insert into database
                conn = sqlite3.connect("orphans.db")
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO chosen_kids (user_id, user_name, user_phone, telegram_username, orphan_id, orphan_name, orphan_gift, orphan_parent_phone, orphan_hyper_link)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (user_phone, user_name, user_phone, telegram_username, orphan_id, orphan_name, orphan_gift, orphan_parent_phone, orphan_hyper_link))
                conn.commit()
                conn.close()

                upload_to_s3("chosen_kids.xlsx", S3_BUCKET_NAME, "chosen_kids.xlsx")
                upload_to_s3("orphans.xlsx", S3_BUCKET_NAME, "orphans.xlsx")

                logging.warning(f"User {telegram_username} chose orphan: {orphan_name} (ID: {orphan_id})")  # Log orphan selection

                await query.edit_message_text(
                    text=(
                        f"üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–ºüéâ!\n"
                        f"‚ùóÔ∏è–í–∞–∂–Ω–æ‚ùóÔ∏è–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ –ø–æ–¥–∞—Ä–∫–∏ –Ω–æ–º–µ—Ä–æ–º –ø–∏—Å—å–º–∞ (–§–æ—Ä–º–∞—Ç: ‚Ññ{orphan_id}, {orphan_name}), —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ—Ç–µ—Ä—è–ª—Å—è —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö \n"
                        f"–¢—ã —Å—Ç–∞–ª –î–µ–¥–æ–º –ú–æ—Ä–æ–∑–æ–º –¥–ª—è:\n"
                        f"–ò–º—è: {orphan_name}\n"
                        f"–ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞: {orphan_id}\n"
                        f"–í–æ–∑—Ä–∞—Å—Ç: {orphan_age}\n"
                        f"–ü–æ–¥–∞—Ä–æ–∫ –º–µ—á—Ç—ã: {orphan_gift}\n"
                        f"–ù–æ–º–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è: {orphan_parent_phone}\n"
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –µ–≥–æ –ø–∏—Å—å–º–æ –î–µ–¥—É –ú–æ—Ä–æ–∑—É: {orphan_hyper_link}\n\n"
                        """–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ¬´ARMAN¬ª –ø–æ –Ω–æ–º–µ—Ä—É +7 775 987 6258. –ü—É—Å—Ç—å –¥–µ—Ç—Å–∫–∏–µ –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è! –ò—Å–∫—Ä–µ–Ω–Ω–µ, —Ç–≤–æ–π ¬´ARMAN¬ª!"""
                        
                    )
                )

                # Ask if user wants to help more
                buttons = [
                    [InlineKeyboardButton("–î–∞", callback_data="yes"), InlineKeyboardButton("–ù–µ—Ç", callback_data="no")]
                ]
                inline_markup = InlineKeyboardMarkup(buttons)
                await query.message.reply_text("–•–æ—á–µ—à—å –ª–∏ —Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?", reply_markup=inline_markup)
                return HELP_MORE
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞.")
    except ValueError as e:
        logging.warning(f"Error in choose_orphan: {e}")  # Log error
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return ConversationHandler.END



# Handle "help more" response
async def help_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "yes":
        orphan_ids = get_all_unchosen_orphan_ids()
        if orphan_ids:
            buttons = [[InlineKeyboardButton(str(i), callback_data=str(i))] for i in orphan_ids]
            inline_markup = InlineKeyboardMarkup(buttons)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ä–µ–±–µ–Ω–∫–∞:", reply_markup=inline_markup)
            return CHOOSE_ORPHAN
        else:
            await query.message.reply_text("–í—Å–µ –¥–µ—Ç–∏ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å!")
            return ConversationHandler.END
    elif query.data == "no":
        logging.warning(f"User {context.user_data['telegram_username']} finished helping.")  # Log user decision
        await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –ø–æ–º–æ—â—å! –ü—É—Å—Ç—å –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è!")
        return ConversationHandler.END

# Main function
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            CHOOSE_ORPHAN: [CallbackQueryHandler(choose_orphan)],
            HELP_MORE: [CallbackQueryHandler(help_more)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
